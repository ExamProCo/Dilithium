"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Util = void 0;

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

// Generated by CoffeeScript 2.4.1
var Util = {
  create: function create(collection, data) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    collection || (collection = []);

    if (opts.reverse) {
      collection.unshift(data);
    } else {
      collection.push(data);
    }

    return data;
  },
  update: function update(collection, data) {
    var i, j, len, m, model;
    model = null;

    for (j = 0, len = collection.length; j < len; j++) {
      m = collection[j];

      if (data.id === m.id) {
        model = m;
      }
    }

    i = collection.indexOf(model);

    if (i === -1) {
      return null;
    }

    collection[i] = data;
    return collection[i];
  },
  destroy: function destroy(collection, data) {
    var i, j, len, m, model;
    model = null;

    for (j = 0, len = collection.length; j < len; j++) {
      m = collection[j];

      if (data.id === m.id) {
        model = m;
      }
    }

    i = collection.indexOf(model);

    if (i === -1) {
      return null;
    }

    collection.splice(i, 1);
    return model;
  },
  find_by: function find_by(key, collection, value) {
    var j, len, model, result;
    result = null;

    for (j = 0, len = collection.length; j < len; j++) {
      model = collection[j];

      if (model[key] === value) {
        result = model;
      }
    }

    return result;
  },
  find_by_id: function find_by_id(collection, id) {
    var j, len, model, result;
    result = null;

    for (j = 0, len = collection.length; j < len; j++) {
      model = collection[j];

      if (model.id === id) {
        result = model;
      }
    }

    return result;
  },
  is_array: function is_array(value) {
    return value && _typeof(value) === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !value.propertyIsEnumerable('length');
  }
};
exports.Util = Util;