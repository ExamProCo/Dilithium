"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApiBase = void 0;

var m = _interopRequireWildcard(require("mithril"));

var _events = require("./../events/events.js");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// Generated by CoffeeScript 2.4.1
var File,
    _form_object_to_form_data,
    _has_attached_file,
    parameter_name,
    request_wrap,
    hasProp = {}.hasOwnProperty;

parameter_name = function parameter_name(root) {
  var name;
  name = root[0];

  if (root.length > 1) {
    name += '[' + root.slice(1).join('][') + ']';
  }

  return name;
};

if (typeof File === 'undefined') {
  File = function File() {
    _classCallCheck(this, File);
  };
} // Why Blob instead of File?
// https://stackoverflow.com/questions/25677681/javascript-file-is-instance-of-file-but-instanceof-file-is-false


_has_attached_file = function has_attached_file(value) {
  var j, k, len, result, v, vv;
  result = false;

  if (_typeof(value) === 'object' && !(value instanceof Blob)) {
    for (k in value) {
      if (!hasProp.call(value, k)) continue;
      v = value[k];
      result |= _has_attached_file(v);
    }
  } else if (typeof value === 'array') {
    for (j = 0, len = v.length; j < len; j++) {
      vv = v[j];
      result |= _has_attached_file(vv);
    }
  } else {
    result |= value instanceof Blob;
  }

  return result;
};

_form_object_to_form_data = function form_object_to_form_data(value) {
  var fd = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var i, j, k, len, v, vv;

  if (!fd) {
    fd = new FormData();
  }

  if (_typeof(value) === 'object' && !(value instanceof Blob)) {
    for (k in value) {
      if (!hasProp.call(value, k)) continue;
      v = value[k];

      _form_object_to_form_data(v, fd, root.concat([k]));
    }
  } else if (typeof value === 'array') {
    for (vv = j = 0, len = value.length; j < len; vv = ++j) {
      i = value[vv];

      _form_object_to_form_data(vv, fd, root.concat([i]));
    }
  } else {
    fd.append(parameter_name(root), value);
  }

  return fd;
}; // AB - the headers isn't even getting passed through,
// this solution will not do


request_wrap = function request_wrap(method) {
  //success and error callbacks can be set via returned promise
  return function (url, data, iso_path) {
    return ApiBase._request(iso_path, method, url, void 0, data, void 0, void 0);
  };
};

var ApiBase = function () {
  var ApiBase =
  /*#__PURE__*/
  function () {
    function ApiBase() {
      _classCallCheck(this, ApiBase);

      var options, ref, table_name;
      this._extract_id = this._extract_id.bind(this);
      this.path = this.path.bind(this);
      this._resource = this._resource.bind(this);
      this._collection = this._collection.bind(this);
      this._member = this._member.bind(this);
      ref = this.resources;

      for (table_name in ref) {
        options = ref[table_name];

        this._resource(table_name, options);
      }
    }

    _createClass(ApiBase, [{
      key: "_extract_id",
      value: function _extract_id(model) {
        if (typeof model === 'string' || typeof model === 'number') {
          return model;
        } else {
          if (typeof model.id === 'function') {
            return model.id();
          } else {
            return model.id;
          }
        }
      }
    }, {
      key: "path",
      value: function path() {
        var namespace, path;
        namespace = this.namespace;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        if (args[0] instanceof Array) {
          path = args[0];

          if (args[1]) {
            namespace = args[1];
          }
        } else {
          path = args;
        }

        if (namespace) {
          path.unshift(namespace);
        }

        path = path.join('/');
        return "/".concat(path);
      }
    }, {
      key: "_resource",
      value: function _resource(tn, options) {
        var _this = this;

        var action, j, len, method, ns, o, only, ref, ref1, ref2, results;
        ns = options.namespace;
        only = {
          index: true,
          "new": true,
          create: true,
          show: true,
          edit: true,
          update: true,
          destroy: true
        };

        if (typeof options === 'string') {
          only = {
            index: false,
            "new": false,
            create: false,
            show: false,
            edit: false,
            update: false,
            destroy: false
          };
          ref = options.split(' ');

          for (j = 0, len = ref.length; j < len; j++) {
            o = ref[j];
            only[o] = true;
          }
        }

        this[tn] = {};

        this[tn].index = function (pms, opts) {
          if (only.index) {
            return ApiBase._request("".concat(tn, "/index"), 'GET', _this.path([tn], ns), _this.headers, pms, opts);
          }
        };

        this[tn]["new"] = function (pms, opts) {
          if (only["new"]) {
            return ApiBase._request("".concat(tn, "/new"), 'GET', _this.path([tn, 'new'], ns), _this.headers, pms, opts);
          }
        };

        this[tn].create = function (pms, opts) {
          if (only.create) {
            return ApiBase._request("".concat(tn, "/create"), 'POST', _this.path([tn], ns), _this.headers, pms, opts);
          }
        };

        this[tn].show = function (model, pms, opts) {
          if (only.show) {
            return ApiBase._request("".concat(tn, "/show"), 'GET', _this.path([tn, _this._extract_id(model)], ns), _this.headers, pms, opts);
          }
        };

        this[tn].edit = function (model, pms, opts) {
          if (only.edit) {
            return ApiBase._request("".concat(tn, "/edit"), 'GET', _this.path([tn, _this._extract_id(model), 'edit'], ns), _this.headers, pms, opts);
          }
        };

        this[tn].update = function (model, pms, opts) {
          if (only.update) {
            return ApiBase._request("".concat(tn, "/update"), 'PUT', _this.path([tn, _this._extract_id(model)], ns), _this.headers, pms, opts);
          }
        };

        this[tn].destroy = function (model, pms, opts) {
          if (only.destroy) {
            return ApiBase._request("".concat(tn, "/destroy"), 'DELETE', _this.path([tn, _this._extract_id(model)], ns), _this.headers, pms, opts);
          }
        };

        ref1 = options.collection;

        for (action in ref1) {
          method = ref1[action];

          this._collection(tn, action, method, ns);
        }

        ref2 = options.member;
        results = [];

        for (action in ref2) {
          method = ref2[action];
          results.push(this._member(tn, action, method, ns));
        }

        return results;
      }
    }, {
      key: "_collection",
      value: function _collection(tn, a, method, ns) {
        var _this2 = this;

        return this[tn][a] = function (params, opts) {
          return ApiBase._request("".concat(tn, "/").concat(a), method.toUpperCase(), _this2.path([tn, a], ns), _this2.headers, params, opts);
        };
      }
    }, {
      key: "_member",
      value: function _member(tn, a, method, ns) {
        var _this3 = this;

        return this[tn][a] = function (model, params, opts) {
          return ApiBase._request("".concat(tn, "/").concat(a), method.toUpperCase(), _this3.path([tn, model.id, a], ns), _this3.headers, params, opts);
        };
      }
    }], [{
      key: "_request",
      value: function _request(iso_path, method, url, headers, data) {
        var opts = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};
        var attrs, error, extract, success;
        success = opts.success;
        error = opts.error;
        extract = opts.extract;
        attrs = opts.attrs;
        return new Promise(function (resolve, reject) {
          var ev_error, ev_success, form_data, headers_attrs, iso_pathless, k, serialize, v;
          iso_pathless = iso_path === void 0;
          headers_attrs = {};

          for (k in headers) {
            v = headers[k];

            if (typeof v === 'function') {
              headers_attrs[k] = v();
            } else {
              headers_attrs[k] = v;
            }
          }

          ev_success = function ev_success(data) {
            if (!iso_pathless) {
              (0, _events.$broadcast)(iso_path, data, attrs);
            }

            if (typeof success === 'function') {
              success(data, attrs);
            }

            return resolve(data);
          };

          ev_error = function ev_error(data) {
            if (!iso_pathless) {
              (0, _events.$broadcast)("".concat(iso_path, "#err"), data, attrs);
            }

            if (typeof error === 'function') {
              error(data, attrs);
            }

            return resolve('api_error');
          };

          if (_has_attached_file(data)) {
            form_data = _form_object_to_form_data(data);

            serialize = function serialize(value) {
              return value;
            };

            attrs = {
              method: method,
              url: url,
              body: form_data,
              serialize: serialize,
              headers: headers_attrs
            };
            return m.request(attrs).then(ev_success, ev_error);
          } else {
            attrs = {
              method: method,
              url: url,
              headers: headers_attrs
            };

            if (method === 'GET') {
              attrs.params = data;
            } else {
              attrs.body = data;
            }

            if (extract) {
              attrs.extract = extract;
            }

            return m.request(attrs).then(ev_success, ev_error);
          }
        });
      }
    }]);

    return ApiBase;
  }();

  ;
  ApiBase.prototype.get = request_wrap('GET');
  ApiBase.prototype.post = request_wrap('POST');
  ApiBase.prototype.put = request_wrap('PUT');
  ApiBase.prototype["delete"] = request_wrap('DELETE');
  return ApiBase;
}.call(void 0);

exports.ApiBase = ApiBase;