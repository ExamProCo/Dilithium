"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Base = void 0;

var _v = _interopRequireDefault(require("uuid/v4"));

var _events = require("./../events/events.js");

var _util = require("./../util/util.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

// Generated by CoffeeScript 2.5.1
var ExpectedComponentAttributes, RenderUndefined;

RenderUndefined = function RenderUndefined(message, component, scope) {
  this.message = message;
  this.component = component;
  return this.scope = scope;
};

ExpectedComponentAttributes = function ExpectedComponentAttributes(message, attribute, component, scope) {
  this.message = message;
  this.attribute = attribute;
  this.component = component;
  return this.scope = scope;
};

var Base = /*#__PURE__*/function () {
  function Base() {
    _classCallCheck(this, Base);

    // register events and bind to instance methods
    // eg. @$on 'users/index', @success
    this.$on = this.$on.bind(this);
    this.$off = this.$off.bind(this);
    this.oninit = this.oninit.bind(this);
    this.onremove = this.onremove.bind(this);
    this.render = this.render.bind(this); // Internal functions
    // ------------------
    // Theses are are preceeded by an _
    // to indicate they are internal functions
    // and should generally not be called manually
    // automatically map attributes
    // If expects is present only strictly
    // map attributes defined in expects
    // and validate the expects requirements

    this._map_attributes = this._map_attributes.bind(this); // A componenets expects specific attributes
    // in order to work. These are defined as such:
    //```
    //class Materials extends Component
    //  expects:
    //    user: ['id']
    //    material: true
    //    material: 'func'
    //    tasks:
    //      array: true
    //    project:
    //      allow_nil: true
    //    task: Task
    //```
    //If it does not meet expectations throw
    //an error

    this._check_expected_attribute = this._check_expected_attribute.bind(this);
  } // unique way of indentifying each components


  _createClass(Base, [{
    key: "scope",
    value: function scope() {
      return (0, _v["default"])();
    }
  }, {
    key: "$on",
    value: function $on(name, fun) {
      var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return (0, _events.$register)(this._scope, name, fun);
    }
  }, {
    key: "$off",
    value: function $off(name) {
      return (0, _events.$deregister)(this._scope, name);
    }
  }, {
    key: "oninit",
    value: function oninit(vnode) {
      var func, name, ref;

      if (!vnode) {
        return;
      }

      this._scope = this.scope();
      ref = this.events;

      for (name in ref) {
        func = ref[name];
        this.$on(name, this[func]);
      }

      this._map_attributes(vnode.attrs);

      return true;
    }
  }, {
    key: "onremove",
    value: function onremove(vnode) {
      var func, name, ref;
      ref = this.events; // remove events

      for (name in ref) {
        func = ref[name];
        this.$off(name, this[func]);
      }

      return true;
    }
  }, {
    key: "view",
    value: function view(vnode) {
      return this.render();
    }
  }, {
    key: "render",
    value: function render() {
      var component;
      component = this.constructor.name;
      throw new RenderUndefined('expected render function to be defined', component, this._scope);
    }
  }, {
    key: "onbeforeupdate",
    value: function onbeforeupdate(vnode) {
      if (!vnode) {
        return;
      }

      this._map_attributes(vnode.attrs);

      return true;
    }
  }, {
    key: "_map_attributes",
    value: function _map_attributes(attrs) {
      var k, ref, results, results1, v;

      if (this.expects) {
        ref = this.expects;
        results = [];

        for (k in ref) {
          v = ref[k];
          results.push(this[k] = this._check_expected_attribute(k, attrs[k]));
        }

        return results;
      } else {
        results1 = [];

        for (k in attrs) {
          v = attrs[k];
          results1.push(this[k] = v);
        }

        return results1;
      }
    }
  }, {
    key: "_check_expected_attribute",
    value: function _check_expected_attribute(attribute, value) {
      var check, component;

      if (!this.expects) {
        return;
      }

      check = this.expects[attribute];

      if (check.allow_nil) {
        return value;
      }

      component = this.constructor.name;

      if (typeof check === 'boolean' && value == null) {
        throw new ExpectedComponentAttributes('expected attribute to be present', attribute, component, this._scope);
      } else if (check.array && !_util.Util.is_array(value)) {
        throw new ExpectedComponentAttributes('expected attribute to be an array', attribute, component, this._scope);
      }

      return value;
    }
  }]);

  return Base;
}();

exports.Base = Base;