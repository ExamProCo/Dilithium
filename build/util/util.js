"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Util = void 0;
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
// Generated by CoffeeScript 2.7.0
var Util = {
  create: function create(collection, data) {
    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    collection || (collection = []);
    if (opts.reverse) {
      collection.unshift(data);
    } else {
      collection.push(data);
    }
    return data;
  },
  update: function update(collection, data) {
    var i, j, len, m, model;
    model = null;
    for (j = 0, len = collection.length; j < len; j++) {
      m = collection[j];
      if (data.id === m.id) {
        model = m;
      }
    }
    i = collection.indexOf(model);
    if (i === -1) {
      return null;
    }
    collection[i] = data;
    return collection[i];
  },
  destroy: function destroy(collection, data) {
    var i, j, len, m, model;
    model = null;
    for (j = 0, len = collection.length; j < len; j++) {
      m = collection[j];
      if (data.id === m.id) {
        model = m;
      }
    }
    i = collection.indexOf(model);
    if (i === -1) {
      return null;
    }
    collection.splice(i, 1);
    return model;
  },
  find_by: function find_by(key, collection, value) {
    var j, len, model, result;
    result = null;
    for (j = 0, len = collection.length; j < len; j++) {
      model = collection[j];
      if (model[key] === value) {
        result = model;
      }
    }
    return result;
  },
  find_by_id: function find_by_id(collection, id) {
    var j, len, model, result;
    result = null;
    for (j = 0, len = collection.length; j < len; j++) {
      model = collection[j];
      if (model.id === id) {
        result = model;
      }
    }
    return result;
  },
  is_array: function is_array(value) {
    return value && _typeof(value) === 'object' && value instanceof Array && typeof value.length === 'number' && typeof value.splice === 'function' && !value.propertyIsEnumerable('length');
  },
  // This utility is to provide a shorthand
  // when applying classes to html elements.

  // The key is the class that will be applied
  // The value is the expression to determine if the class should be applied

  // A boolean of true here would set a class called active:
  // eg. {'active': true}

  // An a javascript expression as the evaluator
  // eg. {'active': @hello is 'world'}

  // You can use the coffeescript nil expression on variable
  // eg. {'active': @active?}

  // You can have dynamic keys that are either variables or functions
  // They must be passed a string with the @ sign. If its a function
  // it will simplify be called. The function takes no arguments
  // If its a variable the string value will become the class name
  // {
  //   "@style": style?
  // }

  classes: function classes(hash) {
    var apply_class_name, class_name, classes, expression, property;
    if (!hash) {
      return [];
    }
    classes = [];
    for (class_name in hash) {
      expression = hash[class_name];
      apply_class_name = typeof expression === 'function' && expression() === true || typeof expression === 'boolean' && expression === true;
      if (apply_class_name) {
        // variable or a function
        if (class_name[0] === '@') {
          property = class_name.substr(1, class_name.length);
          if (this[property] != null) {
            if (typeof this[property] === 'function') {
              classes.push(this[property]());
            } else {
              classes.push(this[property]);
            }
          }
        } else {
          classes.push(class_name);
        }
      }
    }
    return classes;
  }
};
exports.Util = Util;