"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View = void 0;

var _inflection = require("inflection");

var _mithril = require("/mithril");

var _base = require("./../base/base.js");

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }

function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

// Generated by CoffeeScript 2.5.1
var boundMethodCheck = function boundMethodCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new Error('Bound instance method accessed before binding');
  }
};

var View = /*#__PURE__*/function (_Base) {
  _inherits(View, _Base);

  var _super = _createSuper(View);

  function View(args) {
    var _this;

    _classCallCheck(this, View);

    _this = _super.call(this, args); //# reindex is where you would normally make
    //# your api call. If reindex is not overwritten
    //# then it will immediately return sucess telling
    // the page to load.

    _this.reindex = _this.reindex.bind(_assertThisInitialized(_this)); // success is where you would assign the return data
    // if you had made an api call

    _this.onremove = _this.onremove.bind(_assertThisInitialized(_this));
    _this.err = _this.err.bind(_assertThisInitialized(_this));
    _this.success = _this.success.bind(_assertThisInitialized(_this));
    return _this;
  }

  _createClass(View, [{
    key: "oninit",
    value: function oninit(vnode) {
      var body_location, body_view;

      _get(_getPrototypeOf(View.prototype), "oninit", this).call(this, vnode);

      this.reindex();

      if (this.body && this.body.location) {
        body_location = this.body.location;
      }

      body_location || (body_location = (0, _inflection.underscore)(this.constructor.name));

      if (this.body && this.body.view) {
        body_view = this.body.view;
      }

      if (body_location) {
        document.body.setAttribute('location', body_location);
      }

      if (body_view) {
        document.body.setAttribute('view', body_view);
      }

      return true;
    }
  }, {
    key: "reindex",
    value: function reindex() {
      boundMethodCheck(this, View);
      this.loading = true;
      return this.success();
    }
  }, {
    key: "onremove",
    value: function onremove(vnode) {
      boundMethodCheck(this, View);
      document.body.removeAttribute('location');
      return document.body.removeAttribute('view');
    }
  }, {
    key: "err",
    value: function err(_err) {
      boundMethodCheck(this, View);

      if (_err.code === 403) {
        // 403 is access denied
        if (_err.response && _err.response.redirect_to) {
          return window.location.href = _err.response.redirect_to;
        } else {
          return window.location.href = '/';
        } // 404 is page not found, send them to home page

      } else if (_err.code === 404) {
        return window.location.href = '/';
      }
    }
  }, {
    key: "success",
    value: function success() {
      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      boundMethodCheck(this, View);
      this.model = data;
      return this.loading = false;
    }
  }, {
    key: "view",
    value: function view(vnode) {
      if (this.page_error && this.page_error.template) {
        return this.page_error.template(vnode);
      } else if (this.loading) {
        return (0, _mithril.m)('.loading');
      } else {
        return this.render(vnode);
      }
    }
  }]);

  return View;
}(_base.Base);

exports.View = View;